pipeline {
    agent any
    
    tools {
        nodejs 'NodeJS' 
    }
    
    environment {
        // Build Information
        BUILD_TAG = "${env.BRANCH_NAME}-${env.BUILD_NUMBER}-${sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()}"
        
        // Environment Hosts - USANDO TUS CREDENCIALES CONFIGURADAS
        DEV_HOST = credentials('dev-host')
        QA_HOST = credentials('qa-host')
        PROD_HOST = credentials('prod-host')
        
        // SSH Keys
        EC2_SSH_KEY = credentials('ssh-ec2-key')
        
        // Docker Images
        USERS_SERVICE_IMAGE = 'users-service'
        ORDERS_SERVICE_IMAGE = 'orders-service'
    }
    
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timeout(time: 30, unit: 'MINUTES')
        timestamps()
        skipDefaultCheckout(false)
    }
    
    stages {
        stage('üîç Checkout & Environment Setup') {
            steps {
                script {
                    echo "üöÄ Starting build for branch: ${env.BRANCH_NAME}"
                    echo "üì¶ Build number: ${env.BUILD_NUMBER}"
                    echo "üè∑Ô∏è Build tag: ${BUILD_TAG}"
                    
                    // Actualizado para usar dev/qa/main
                    env.DEPLOY_ENV = getEnvironmentFromBranch(env.BRANCH_NAME)
                    env.TARGET_HOST = getHostForEnvironment(env.DEPLOY_ENV)
                    
                    echo "üéØ Target environment: ${env.DEPLOY_ENV}"
                    echo "üñ•Ô∏è Target host: ${env.TARGET_HOST}"
                }
            }
        }
        
        // ... (etapas de Verify Project Structure, Install Dependencies, Run Tests se mantienen igual)
        
        stage('üì¶ Prepare Deployment Package') {
            steps {
                script {
                    echo "üì¶ Preparing deployment package..."
                    sh '''
                        echo "Creating deployment package..."
                        
                        # Cambiado de 'deployment' a 'practica-1-deployment'
                        mkdir -p practica-1-deployment
                        
                        # Copiar servicios (sin node_modules)
                        echo "Copying Users Service..."
                        mkdir -p practica-1-deployment/users-service
                        cp users-service/package*.json practica-1-deployment/users-service/
                        cp users-service/server.js practica-1-deployment/users-service/
                        cp users-service/Dockerfile practica-1-deployment/users-service/
                        
                        echo "Copying Orders Service..."
                        mkdir -p practica-1-deployment/orders-service
                        cp orders-service/package*.json practica-1-deployment/orders-service/
                        cp orders-service/server.js practica-1-deployment/orders-service/
                        cp orders-service/Dockerfile practica-1-deployment/orders-service/
                        
                        # Docker Compose (se mantiene igual)
                        cat > practica-1-deployment/docker-compose.yml << 'EOF'
version: '3.8'
services:
  users-service:
    build: ./users-service
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
    restart: always

  orders-service:
    build: ./orders-service
    ports:
      - "3002:3002"
    depends_on:
      - users-service
    restart: always
EOF
                        
                        # Script de despliegue (actualizado para usar ~/practica-1)
                        cat > practica-1-deployment/deploy.sh << 'EOF'
#!/bin/bash
set -e

echo "üöÄ Starting deployment..."
cd ~/practica-1/

# Instalar Docker si no existe (se mantiene igual)
if ! command -v docker &> /dev/null; then
    sudo apt update -y
    sudo apt install -y docker.io
    sudo systemctl start docker
    sudo usermod -a -G docker $USER
fi

# Instalar Docker Compose si no existe
if ! command -v docker-compose &> /dev/null; then
    sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
fi

echo "üõë Stopping existing services..."
docker-compose down || true

echo "üîß Building and starting services..."
docker-compose up -d --build

echo "‚úÖ Deployment completed!"
EOF
                        
                        chmod +x practica-1-deployment/deploy.sh
                    '''
                }
            }
        }
        
        stage('üöÄ Deploy to Environment') {
            // Actualizado para usar dev/qa/main
            when {
                anyOf {
                    branch 'main'
                    branch 'qa'
                    branch 'dev'
                }
            }
            steps {
                script {
                    echo "üöÄ Deploying to ${env.DEPLOY_ENV} environment..."
                    echo "üñ•Ô∏è Target host: ${env.TARGET_HOST}"
                    
                    sshagent(credentials: ['ssh-ec2-key']) {
                        sh """
                            # Cambiado a practica-1 en el servidor remoto
                            scp -o StrictHostKeyChecking=no -r practica-1-deployment/ ubuntu@${env.TARGET_HOST}:~/practica-1/
                            
                            ssh -o StrictHostKeyChecking=no ubuntu@${env.TARGET_HOST} << 'EOF'
                                cd ~/practica-1
                                chmod +x deploy.sh
                                ./deploy.sh
EOF
                        """
                    }
                }
            }
        }
        
        // ... (etapas de Final Health Check y post se mantienen igual)
    }
    
    post {
        always {
            script {
                echo "üßπ Cleaning up workspace..."
                sh '''
                    pkill -f "npm start" || true
                    pkill -f "node server.js" || true
                '''
                // Actualizado para archivar practica-1-deployment
                archiveArtifacts artifacts: 'practica-1-deployment/**', allowEmptyArchive: true
                cleanWs()
            }
        }
    }
}

// ============================
// HELPER FUNCTIONS (Actualizadas para dev/qa/main)
// ============================

def getEnvironmentFromBranch(branchName) {
    switch(branchName) {
        case 'main':
            return 'PROD'
        case 'qa':
            return 'QA'
        case 'dev':
            return 'DEV'
        default:
            return 'DEV'  // Por defecto a DEV para otras ramas
    }
}

def getHostForEnvironment(environment) {
    switch(environment) {
        case 'DEV':
            return env.DEV_HOST ?: 'dev-host-not-configured'
        case 'QA':
            return env.QA_HOST ?: 'qa-host-not-configured'
        case 'PROD':
            return env.PROD_HOST ?: 'prod-host-not-configured'
        default:
            return 'unknown-host'
    }
}