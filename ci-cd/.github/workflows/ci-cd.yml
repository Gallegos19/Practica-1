name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'release/*' ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_USERS: users-service
  IMAGE_NAME_ORDERS: orders-service

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [users-service, orders-service]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: '${{ matrix.service }}/package-lock.json'
    
    - name: Install dependencies
      working-directory: ./${{ matrix.service }}
      run: npm ci
    
    - name: Run tests
      working-directory: ./${{ matrix.service }}
      run: npm test
    
    - name: Run linting
      working-directory: ./${{ matrix.service }}
      run: npm run lint || true
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.service }}
        path: ./${{ matrix.service }}/coverage/

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Extract metadata for Users Service
      id: meta-users
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME_USERS }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Users Service
      uses: docker/build-push-action@v5
      with:
        context: ./users-service
        push: true
        tags: ${{ steps.meta-users.outputs.tags }}
        labels: ${{ steps.meta-users.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Extract metadata for Orders Service
      id: meta-orders
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME_ORDERS }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Orders Service
      uses: docker/build-push-action@v5
      with:
        context: ./orders-service
        push: true
        tags: ${{ steps.meta-orders.outputs.tags }}
        labels: ${{ steps.meta-orders.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    strategy:
      matrix:
        environment: 
          - name: development
            branch: develop
            host: ${{ secrets.DEV_HOST }}
            ssh_key: ${{ secrets.DEV_SSH_KEY }}
          - name: qa
            branch: release/*
            host: ${{ secrets.QA_HOST }}
            ssh_key: ${{ secrets.QA_SSH_KEY }}
          - name: production
            branch: main
            host: ${{ secrets.PROD_HOST }}
            ssh_key: ${{ secrets.PROD_SSH_KEY }}
    
    environment: ${{ matrix.environment.name }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to ${{ matrix.environment.name }}
      if: github.ref == 'refs/heads/${{ matrix.environment.branch }}' || (github.ref == 'refs/heads/main' && matrix.environment.name == 'production')
      run: |
        echo "Deploying to ${{ matrix.environment.name }} environment"
        
        # Setup SSH
        mkdir -p ~/.ssh
        echo "${{ matrix.environment.ssh_key }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keyscan -H ${{ matrix.environment.host }} >> ~/.ssh/known_hosts
        
        # Copy deployment files
        scp -i ~/.ssh/deploy_key docker-compose.prod.yml ec2-user@${{ matrix.environment.host }}:~/docker-compose.yml
        scp -i ~/.ssh/deploy_key nginx.conf ec2-user@${{ matrix.environment.host }}:~/
        
        # Deploy services
        ssh -i ~/.ssh/deploy_key ec2-user@${{ matrix.environment.host }} << 'EOF'
          # Login to GitHub Container Registry
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Pull and deploy
          docker-compose pull
          docker-compose up -d
          
          # Health check
          sleep 30
          curl -f http://localhost:3001/health || exit 1
          curl -f http://localhost:3002/health || exit 1
          
          echo "Deployment completed successfully!"
        EOF

  notify:
    needs: [test, build, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify Slack on Success
      if: needs.deploy.result == 'success'
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "✅ Deployment successful!"
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
    
    - name: Notify Slack on Failure
      if: needs.test.result == 'failure' || needs.build.result == 'failure' || needs.deploy.result == 'failure'
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "❌ Pipeline failed!"
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        